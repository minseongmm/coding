//2206 메모리 13728kb 시간 116ms
//벽부수고 이동하기
//(1,1)부터 (n,m)까지 최대 1개의 벽을 부수고 가는 최소 경로를 찾으시오
//첫 방식은 큐를 두개 사용해, 한개의 큐에 모든 벽에 위치를 저장해놓고
//각 벽을 하나씩 부셔보며 bfs를 돌렸다.
//하지만 시간복잡도가 매우매우 터져서 시간초과로 실패했고 
//두 개의 큐로 여러번 시행하는게 아니라 하나의 큐에 삼차원배열을 이용했다.

#include <iostream>
#include <queue>
#include <string>
#include <vector>
#include <tuple>
#include <cstdio>
#include <cstring>

using namespace std;
queue<tuple<int,int, int>> q;
int miro[1001][1001];
int d[1001][1001][2]; // i값, j값, 벽을 몇번 부셨는지 나타낸다
int n, m;

int qx[] = { 0, 0, 1, -1 };
int qy[] = { 1, -1, 0, 0 };

void bfs() {
	while (!(q.empty())) {
		int a, b, c;
		tie(a, b, c) = q.front();
		q.pop();

		for (int i = 0; i < 4; i++) {
			int da = a + qx[i];
			int db = b + qy[i];

			if (da >= 0 && da < n && db >= 0 && db < m)
			{
				if (d[da][db][c] == -1 && miro[da][db] == 0)
				{
					d[da][db][c] = d[a][b][c] + 1;
					q.push(make_tuple(da, db, c));
				}

				if (c == 0 && d[da][db][1] == -1 && miro[da][db] == 1)
				{
					// 벽을 안부셨으면 한번 부시고 이동할 기회를 준다.
					d[da][db][1] = d[a][b][c] + 1;
					q.push(make_tuple(da, db, 1));
				}
			}
		}
	}
}
int main() {

	cin >> n >> m;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf_s("%1d", &miro[i][j]);
		}
	}
	memset(d, -1, sizeof(d));

	q.push(make_tuple(0, 0, 0));
	d[0][0][0] = 1;

	bfs();

	if (d[n - 1][m - 1][0] != -1 && d[n - 1][m - 1][1] != -1)
		cout << min(d[n - 1][m - 1][0], d[n - 1][m - 1][1]);

	else if (d[n - 1][m - 1][0] != -1)
		cout << d[n - 1][m - 1][0];

	else if (d[n - 1][m - 1][1] != -1)
		cout << d[n - 1][m - 1][1];
	else
		cout << "-1";

	return 0;
}