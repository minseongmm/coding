#include <iostream>
//1107 리모콘
// 메모리 1988kb 시간 0ms
// for문을 이용하여 가야되는 채널을 i씩 증가시키고, i씩 감소시켰다.
// 그 값들의 모든 구성요소가 ch[x] == 1 로 고장나지 않았으면 for문 탈출
// 값들의 구성요소 중 하나라도 ch[x] == 0으로 고장났으면 for문 계속 진행
// 얻은 최솟값과 100에서 부터 +-를 이용해 이동하는 값중에 더 최솟값을 구함
// 최솟값 출력
// 주의사항 두가지
// 1. m이 10으로 모든 키가 고장났을 때는 100에서 +-로 움직여야 하는 바로 |n-100| 출력
// 2. for문으로 n +- i를 할 때 n-i가 가능한지 먼저 확인하고 n+i 확인
//    n-i는 n+i보다 한 자리 덜 입력해도 되서 더 값이 작을 수 있기 때문
using namespace std;

int main() {
	int n, m;  // n은 목표가 되는 채널 m은 고장난 버튼 수
	int ch[10]; // 고장남 버튼은 0으로 표현
	int i = 0;

	for (i = 0; i < 10; i++)
		ch[i] = 1; // 초기값으로 처음 버튼들은 멀쩡

	cin >> n;
	cin >> m;
	int aa; // 고장난 채널 번호

	for (i = 0; i < m; i++) { // 고장남 채널 수 만큼 받음
		cin >> aa;
		ch[aa] = 0;
	}

	int tmp = 1;
	int min = 0;

	if (n >= 100) // n - 100의 절댓값을 구하는 과정
		min = n - 100;
	else
		min = 100 - n;

	if (m == 10)
	{
		cout << min;
		return 0;
	}

	int mm = 0;
	int len = 0;

	for (i = 0; i < 10000000; i++) {
		if (n - i >= 0) // 위에서 언급한대로 n-i부터 검사 && n-i이 0이상이라는 조건 하에
		{
			len = 1;
			tmp = n - i;

			while (1) {
				if (ch[tmp % 10] == 0) // 채널 구성요소중 고장난게 있으면
					break;

				if (tmp / 10 == 0) // 채널 구성요소중 고장난게 없고 len만큼 검사가 끝났으면
				{
					mm = i;  // 최솟값에 i값을 넣고
					i = 10000000; // for문을 탈출하게 i값조정
					break;
				}

				len++;
				tmp = tmp / 10;
			}
		}

		if (i == 10000000)
			break;

			tmp = n + i;
			len = 1;
			while (1) {
				if (ch[tmp % 10] == 0)
					break;

				if (tmp / 10 == 0)
				{
					mm = i;
					i = 10000000;
					break;
				}
				len++;
				tmp = tmp / 10;
			}
	}

	// 더 최솟값 출력
	if (min > mm + len)
		cout << mm + len;
	else
		cout << min;

	return 0;
}